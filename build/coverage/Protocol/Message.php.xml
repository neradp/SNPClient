<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Message.php" path="/Protocol">
    <totals>
      <lines total="147" comments="84" code="63" executable="15" executed="15" percent="100.00"/>
      <methods count="8" tested="8" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="bTd\SNP\Protocol\Message" start="22" executable="15" executed="15" crap="9">
      <package full="bTd" name="bTd" sub="" category=""/>
      <namespace name="bTd\SNP\Protocol"/>
      <method name="getContent" signature="getContent(): array" start="44" end="48" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setContent" signature="setContent(array $content): void" start="56" end="60" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="addToContent" signature="addToContent(string $param, string $value): void" start="69" end="73" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="getFromContent" signature="getFromContent(string $param): string" start="82" end="86" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="__toString" signature="__toString(): string" start="94" end="105" crap="2" executable="5" executed="5" coverage="100"/>
      <method name="getHeader" signature="getHeader(): string" start="113" end="117" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setHeader" signature="setHeader(string $header): void" start="125" end="129" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="getTerminator" signature="getTerminator(): string" start="137" end="141" crap="1" executable="1" executed="1" coverage="100"/>
    </class>
    <coverage>
      <line nr="46">
        <covered by="MessageTest::testGetContent"/>
        <covered by="MessageTest::testAddToContent"/>
      </line>
      <line nr="58">
        <covered by="MessageTest::testSetContent"/>
      </line>
      <line nr="60">
        <covered by="MessageTest::testSetContent"/>
      </line>
      <line nr="71">
        <covered by="ForwardRequestTest::testForwardRequest"/>
        <covered by="MessageTest::testAddToContent"/>
        <covered by="NotifyRequestTest::testNotifyRequest"/>
        <covered by="RegisterRequestTest::testRegisterRequest"/>
        <covered by="RequestTest::testSetApplicationIdentification"/>
        <covered by="ResponseTest::testFailedResponse"/>
      </line>
      <line nr="73">
        <covered by="ForwardRequestTest::testForwardRequest"/>
        <covered by="MessageTest::testAddToContent"/>
        <covered by="NotifyRequestTest::testNotifyRequest"/>
        <covered by="RegisterRequestTest::testRegisterRequest"/>
        <covered by="RequestTest::testSetApplicationIdentification"/>
        <covered by="ResponseTest::testFailedResponse"/>
      </line>
      <line nr="84">
        <covered by="ForwardRequestTest::testForwardRequest"/>
        <covered by="MessageTest::testGetFromContent"/>
        <covered by="NotifyRequestTest::testNotifyRequest"/>
        <covered by="RegisterRequestTest::testRegisterRequest"/>
        <covered by="RequestTest::testSetApplicationIdentification"/>
        <covered by="ResponseTest::testBrokenResponse"/>
        <covered by="ResponseTest::testFailedResponse"/>
      </line>
      <line nr="96">
        <covered by="MessageTest::testRawMessageFormat"/>
      </line>
      <line nr="98">
        <covered by="MessageTest::testRawMessageFormat"/>
      </line>
      <line nr="99">
        <covered by="MessageTest::testRawMessageFormat"/>
      </line>
      <line nr="102">
        <covered by="MessageTest::testRawMessageFormat"/>
      </line>
      <line nr="103">
        <covered by="MessageTest::testRawMessageFormat"/>
      </line>
      <line nr="115">
        <covered by="MessageTest::testGetHeader"/>
        <covered by="MessageTest::testRawMessageFormat"/>
        <covered by="RequestTest::testSetRequestType"/>
        <covered by="RequestTest::testAuthenticate"/>
        <covered by="ResponseTest::testSuccessResponse"/>
        <covered by="ResponseTest::testBrokenResponse"/>
        <covered by="ResponseTest::testFailedResponse"/>
      </line>
      <line nr="127">
        <covered by="ForwardRequestTest::testForwardRequest"/>
        <covered by="MessageTest::testSetHeader"/>
        <covered by="NotifyRequestTest::testNotifyRequest"/>
        <covered by="RegisterRequestTest::testRegisterRequest"/>
        <covered by="RequestTest::testSetRequestType"/>
        <covered by="RequestTest::testAuthenticate"/>
        <covered by="RequestTest::testSetApplicationIdentification"/>
        <covered by="ResponseTest::testSuccessResponse"/>
        <covered by="ResponseTest::testBrokenResponse"/>
        <covered by="ResponseTest::testFailedResponse"/>
      </line>
      <line nr="129">
        <covered by="ForwardRequestTest::testForwardRequest"/>
        <covered by="MessageTest::testSetHeader"/>
        <covered by="NotifyRequestTest::testNotifyRequest"/>
        <covered by="RegisterRequestTest::testRegisterRequest"/>
        <covered by="RequestTest::testSetRequestType"/>
        <covered by="RequestTest::testAuthenticate"/>
        <covered by="RequestTest::testSetApplicationIdentification"/>
        <covered by="ResponseTest::testSuccessResponse"/>
        <covered by="ResponseTest::testBrokenResponse"/>
        <covered by="ResponseTest::testFailedResponse"/>
      </line>
      <line nr="139">
        <covered by="MessageTest::testGetTerminator"/>
        <covered by="MessageTest::testRawMessageFormat"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * Copyright (c) 2018. Peter Ner&#xE1;d</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="5"/>
      <line no="6">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * Project: SNPClient</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> * Author: Peter Ner&#xE1;d</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * Date: 15. 9. 2018</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> * Time: 10:49</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="12"/>
      <line no="13">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bTd</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">SNP</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Protocol</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14"/>
      <line no="15"/>
      <line no="16">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="17">
        <token name="T_DOC_COMMENT"> * Class Message</token>
      </line>
      <line no="18">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="19">
        <token name="T_DOC_COMMENT"> * @package bTd\SNP\Protocol</token>
      </line>
      <line no="20">
        <token name="T_DOC_COMMENT"> * @see     https://github.com/fullphat/snarl/wiki/SNP-3.1#message-structure</token>
      </line>
      <line no="21">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="22">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Message</token>
      </line>
      <line no="23">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="24"/>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="26">
        <token name="T_DOC_COMMENT">     * @var string Contain the header part of the message.</token>
      </line>
      <line no="27">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$header</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="30">
        <token name="T_DOC_COMMENT">     * @var array Contain the content part of the message.</token>
      </line>
      <line no="31">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$content</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT">     * @var string Contain the terminator part of the message.</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$terminator</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Protocol</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">TERMINATOR</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="37"/>
      <line no="38"/>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="40">
        <token name="T_DOC_COMMENT">     * Get the whole  content part of the message.</token>
      </line>
      <line no="41">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="42">
        <token name="T_DOC_COMMENT">     * @return array The whole content part of message.</token>
      </line>
      <line no="43">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getContent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">content</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="47"/>
      <line no="48">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMENT">//end getContent()</token>
      </line>
      <line no="49"/>
      <line no="50"/>
      <line no="51">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="52">
        <token name="T_DOC_COMMENT">     * Set the whole content part of the message.</token>
      </line>
      <line no="53">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="54">
        <token name="T_DOC_COMMENT">     * @param array $conntent The whole content part of message.</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setContent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$content</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">content</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$content</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="59"/>
      <line no="60">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMENT">//end setContent()</token>
      </line>
      <line no="61"/>
      <line no="62"/>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="64">
        <token name="T_DOC_COMMENT">     * Add a named value to the content part of message.</token>
      </line>
      <line no="65">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="66">
        <token name="T_DOC_COMMENT">     * @param string $param Name.</token>
      </line>
      <line no="67">
        <token name="T_DOC_COMMENT">     * @param string $value Value.</token>
      </line>
      <line no="68">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">addToContent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$param</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">content</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$param</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72"/>
      <line no="73">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMENT">//end addToContent()</token>
      </line>
      <line no="74"/>
      <line no="75"/>
      <line no="76">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="77">
        <token name="T_DOC_COMMENT">     * Get a value from the content part of message by its name.</token>
      </line>
      <line no="78">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="79">
        <token name="T_DOC_COMMENT">     * @param  string $param Name.</token>
      </line>
      <line no="80">
        <token name="T_DOC_COMMENT">     * @return string Value.</token>
      </line>
      <line no="81">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getFromContent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$param</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">content</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$param</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="85"/>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMENT">//end getFromContent()</token>
      </line>
      <line no="87"/>
      <line no="88"/>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="90">
        <token name="T_DOC_COMMENT">     * Compose message to raw format.</token>
      </line>
      <line no="91">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="92">
        <token name="T_DOC_COMMENT">     * @return string  The raw format of message.</token>
      </line>
      <line no="93">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__toString</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$str</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHeader</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_DOT">.</token>
        <token name="T_STRING">Protocol</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">EOL</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="97"/>
      <line no="98">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">content</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$param</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$str</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$param</token>
        <token name="T_DOT">.</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">": "</token>
        <token name="T_DOT">.</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_DOT">.</token>
        <token name="T_STRING">Protocol</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">EOL</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="101"/>
      <line no="102">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$str</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getTerminator</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_DOT">.</token>
        <token name="T_STRING">Protocol</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">EOL</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$str</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="104"/>
      <line no="105">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMENT">//end __toString()</token>
      </line>
      <line no="106"/>
      <line no="107"/>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="109">
        <token name="T_DOC_COMMENT">     * Get the header part of the message.</token>
      </line>
      <line no="110">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="111">
        <token name="T_DOC_COMMENT">     * @return string The message header.</token>
      </line>
      <line no="112">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getHeader</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">header</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="116"/>
      <line no="117">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMENT">//end getHeader()</token>
      </line>
      <line no="118"/>
      <line no="119"/>
      <line no="120">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="121">
        <token name="T_DOC_COMMENT">     * Set the header part of the message.</token>
      </line>
      <line no="122">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="123">
        <token name="T_DOC_COMMENT">     * @param string $header The message header.</token>
      </line>
      <line no="124">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setHeader</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$header</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">header</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$header</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="128"/>
      <line no="129">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMENT">//end setHeader()</token>
      </line>
      <line no="130"/>
      <line no="131"/>
      <line no="132">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="133">
        <token name="T_DOC_COMMENT">     * Get the terminator part of the message.</token>
      </line>
      <line no="134">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="135">
        <token name="T_DOC_COMMENT">     * @return string The terminator part of message.</token>
      </line>
      <line no="136">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getTerminator</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">terminator</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="140"/>
      <line no="141">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMENT">//end getTerminator()</token>
      </line>
      <line no="142"/>
      <line no="143"/>
      <line no="144"/>
      <line no="145"/>
      <line no="146"/>
      <line no="147">
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMENT">//end class</token>
      </line>
      <line no="148"/>
    </source>
  </file>
</phpunit>
